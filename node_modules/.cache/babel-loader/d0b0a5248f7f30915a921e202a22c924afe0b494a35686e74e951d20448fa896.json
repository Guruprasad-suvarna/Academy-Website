{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2000081298\\\\Amerihealth\\\\acfc\\\\src\\\\pages\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n\n// function AnimatedExample() {\n\n//   return <ProgressBar animated now={50} variant=\"info\" />;\n// }\n\n// export default AnimatedExample;\n\nimport React, { useState } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomProgressBar() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const handleClick = () => {\n    // Set progress to 0\n    setProgress(0);\n\n    // Simulate progress incrementing every 100 milliseconds\n    const interval = setInterval(() => {\n      setProgress(prevProgress => {\n        // Increment progress by 1 until it reaches 100\n        if (prevProgress >= 100) {\n          clearInterval(interval); // Stop the interval when progress reaches 100\n          return 100;\n        }\n        return prevProgress + 1;\n      });\n    }, 100); // Change the interval duration as needed\n\n    // Simulate a delay before the progress starts\n    setTimeout(() => {\n      clearInterval(interval); // Stop the interval if it's still running\n      setProgress(10); // Start progress from 10%\n    }, 2000); // Change the delay duration as needed\n\n    // Simulate a delay before the progress completes\n    setTimeout(() => {\n      setProgress(100); // Set progress to 100% when completed\n    }, 5000); // Change the completion delay duration as needed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n      animated: true,\n      now: Progress,\n      variant: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomProgressBar, \"MDavqfnVfXtrXQtLNoGNVIaRLCY=\");\n_c = CustomProgressBar;\nexport default CustomProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CustomProgressBar\");","map":{"version":3,"names":["React","useState","ProgressBar","jsxDEV","_jsxDEV","CustomProgressBar","_s","progress","setProgress","handleClick","interval","setInterval","prevProgress","clearInterval","setTimeout","children","animated","now","Progress","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/2000081298/Amerihealth/acfc/src/pages/ProgressBar.js"],"sourcesContent":["// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n// function AnimatedExample() {\r\n\r\n//   return <ProgressBar animated now={50} variant=\"info\" />;\r\n// }\r\n\r\n// export default AnimatedExample;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\nfunction CustomProgressBar() {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const handleClick = () => {\r\n    // Set progress to 0\r\n    setProgress(0);\r\n\r\n    // Simulate progress incrementing every 100 milliseconds\r\n    const interval = setInterval(() => {\r\n      setProgress((prevProgress) => {\r\n        // Increment progress by 1 until it reaches 100\r\n        if (prevProgress >= 100) {\r\n          clearInterval(interval); // Stop the interval when progress reaches 100\r\n          return 100;\r\n        }\r\n        return prevProgress + 1;\r\n      });\r\n    }, 100); // Change the interval duration as needed\r\n\r\n    // Simulate a delay before the progress starts\r\n    setTimeout(() => {\r\n      clearInterval(interval); // Stop the interval if it's still running\r\n      setProgress(10); // Start progress from 10%\r\n    }, 2000); // Change the delay duration as needed\r\n\r\n    // Simulate a delay before the progress completes\r\n    setTimeout(() => {\r\n      setProgress(100); // Set progress to 100% when completed\r\n    }, 5000); // Change the completion delay duration as needed\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <ProgressBar animated now={Progress} variant=\"info\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomProgressBar;\r\n\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAD,WAAW,CAAC,CAAC,CAAC;;IAEd;IACA,MAAME,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCH,WAAW,CAAEI,YAAY,IAAK;QAC5B;QACA,IAAIA,YAAY,IAAI,GAAG,EAAE;UACvBC,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;UACzB,OAAO,GAAG;QACZ;QACA,OAAOE,YAAY,GAAG,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET;IACAE,UAAU,CAAC,MAAM;MACfD,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;MACzBF,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACAM,UAAU,CAAC,MAAM;MACfN,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,oBACEJ,OAAA;IAAAW,QAAA,eAEEX,OAAA,CAACF,WAAW;MAACc,QAAQ;MAACC,GAAG,EAAEC,QAAS;MAACC,OAAO,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAACjB,EAAA,CArCQD,iBAAiB;AAAAmB,EAAA,GAAjBnB,iBAAiB;AAuC1B,eAAeA,iBAAiB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}