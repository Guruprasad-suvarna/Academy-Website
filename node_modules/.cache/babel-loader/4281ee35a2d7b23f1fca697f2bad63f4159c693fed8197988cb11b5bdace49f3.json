{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2000081298\\\\Amerihealth\\\\acfc\\\\src\\\\pages\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n\n// function AnimatedExample() {\n\n//   return <ProgressBar animated now={50} variant=\"info\" />;\n// }\n\n// export default AnimatedExample;\n\n// import React, { useState } from 'react';\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n\n// function CustomProgressBar() {\n//   const [progress, setProgress] = useState(0);\n\n//   const handleClick = () => {\n//     // Set progress to 0\n//     setProgress(0);\n\n//     // Simulate progress incrementing every 100 milliseconds\n//     const interval = setInterval(() => {\n//       setProgress((prevProgress) => {\n//         // Increment progress by 1 until it reaches 100\n//         if (prevProgress >= 100) {\n//           clearInterval(interval); // Stop the interval when progress reaches 100\n//           return 100;\n//         }\n//         return prevProgress + 1;\n//       });\n//     }, 100); // Change the interval duration as needed\n\n//     // Simulate a delay before the progress starts\n//     setTimeout(() => {\n//       clearInterval(interval); // Stop the interval if it's still running\n//       setProgress(10); // Start progress from 10%\n//     }, 2000); // Change the delay duration as needed\n\n//     // Simulate a delay before the progress completes\n//     setTimeout(() => {\n//       setProgress(100); // Set progress to 100% when completed\n//     }, 5000); // Change the completion delay duration as needed\n//   };\n\n//   return (\n//     <div>\n\n//       <ProgressBar animated now={progress} variant=\"info\" />\n//     </div>\n//   );\n// }\n\n// export default CustomProgressBar;\n\nimport React, { useState } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomProgressBar() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Simulated function to represent a task with progress\n  const simulateTask = () => {\n    setIsLoading(true);\n\n    // Simulate progress every 100 milliseconds\n    const interval = setInterval(() => {\n      setProgress(prevProgress => {\n        if (prevProgress >= 100) {\n          clearInterval(interval);\n          setIsLoading(false);\n          return 100;\n        }\n        return prevProgress + 1;\n      });\n    }, 100);\n\n    // Simulate task completion after 5 seconds\n    setTimeout(() => {\n      clearInterval(interval);\n      setIsLoading(false);\n      setProgress(100);\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n      animated: true,\n      now: progress,\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomProgressBar, \"rB8dvTYqb9dtLLtHecJBtGVYkjA=\");\n_c = CustomProgressBar;\nexport default CustomProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CustomProgressBar\");","map":{"version":3,"names":["React","useState","ProgressBar","jsxDEV","_jsxDEV","CustomProgressBar","_s","progress","setProgress","isLoading","setIsLoading","simulateTask","interval","setInterval","prevProgress","clearInterval","setTimeout","children","animated","now","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/2000081298/Amerihealth/acfc/src/pages/ProgressBar.js"],"sourcesContent":["// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n// function AnimatedExample() {\r\n\r\n//   return <ProgressBar animated now={50} variant=\"info\" />;\r\n// }\r\n\r\n// export default AnimatedExample;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n// function CustomProgressBar() {\r\n//   const [progress, setProgress] = useState(0);\r\n\r\n//   const handleClick = () => {\r\n//     // Set progress to 0\r\n//     setProgress(0);\r\n\r\n//     // Simulate progress incrementing every 100 milliseconds\r\n//     const interval = setInterval(() => {\r\n//       setProgress((prevProgress) => {\r\n//         // Increment progress by 1 until it reaches 100\r\n//         if (prevProgress >= 100) {\r\n//           clearInterval(interval); // Stop the interval when progress reaches 100\r\n//           return 100;\r\n//         }\r\n//         return prevProgress + 1;\r\n//       });\r\n//     }, 100); // Change the interval duration as needed\r\n\r\n//     // Simulate a delay before the progress starts\r\n//     setTimeout(() => {\r\n//       clearInterval(interval); // Stop the interval if it's still running\r\n//       setProgress(10); // Start progress from 10%\r\n//     }, 2000); // Change the delay duration as needed\r\n\r\n//     // Simulate a delay before the progress completes\r\n//     setTimeout(() => {\r\n//       setProgress(100); // Set progress to 100% when completed\r\n//     }, 5000); // Change the completion delay duration as needed\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n      \r\n//       <ProgressBar animated now={progress} variant=\"info\" />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CustomProgressBar;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\nfunction CustomProgressBar() {\r\n  const [progress, setProgress] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Simulated function to represent a task with progress\r\n  const simulateTask = () => {\r\n    setIsLoading(true);\r\n\r\n    // Simulate progress every 100 milliseconds\r\n    const interval = setInterval(() => {\r\n      setProgress((prevProgress) => {\r\n        if (prevProgress >= 100) {\r\n          clearInterval(interval);\r\n          setIsLoading(false);\r\n          return 100;\r\n        }\r\n        return prevProgress + 1;\r\n      });\r\n    }, 100);\r\n\r\n    // Simulate task completion after 5 seconds\r\n    setTimeout(() => {\r\n      clearInterval(interval);\r\n      setIsLoading(false);\r\n      setProgress(100);\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <button onClick={simulateTask} disabled={isLoading}>\r\n        {isLoading ? 'Loading...' : 'Start Task'}\r\n      </button> */}\r\n      <ProgressBar animated now={progress} variant=\"success\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomProgressBar;\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzBD,YAAY,CAAC,IAAI,CAAC;;IAElB;IACA,MAAME,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCL,WAAW,CAAEM,YAAY,IAAK;QAC5B,IAAIA,YAAY,IAAI,GAAG,EAAE;UACvBC,aAAa,CAACH,QAAQ,CAAC;UACvBF,YAAY,CAAC,KAAK,CAAC;UACnB,OAAO,GAAG;QACZ;QACA,OAAOI,YAAY,GAAG,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;;IAEP;IACAE,UAAU,CAAC,MAAM;MACfD,aAAa,CAACH,QAAQ,CAAC;MACvBF,YAAY,CAAC,KAAK,CAAC;MACnBF,WAAW,CAAC,GAAG,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEJ,OAAA;IAAAa,QAAA,eAIEb,OAAA,CAACF,WAAW;MAACgB,QAAQ;MAACC,GAAG,EAAEZ,QAAS;MAACa,OAAO,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV;AAAClB,EAAA,CApCQD,iBAAiB;AAAAoB,EAAA,GAAjBpB,iBAAiB;AAsC1B,eAAeA,iBAAiB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}