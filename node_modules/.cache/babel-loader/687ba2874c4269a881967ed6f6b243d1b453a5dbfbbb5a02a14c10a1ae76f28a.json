{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2000081298\\\\Amerihealth\\\\acfc\\\\src\\\\pages\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n\n// function AnimatedExample() {\n\n//   return <ProgressBar animated now={50} variant=\"info\" />;\n// }\n\n// export default AnimatedExample;\n\n// import React, { useState } from 'react';\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n\n// function CustomProgressBar() {\n//   const [progress, setProgress] = useState(0);\n\n//   const handleClick = () => {\n//     // Set progress to 0\n//     setProgress(0);\n\n//     // Simulate progress incrementing every 100 milliseconds\n//     const interval = setInterval(() => {\n//       setProgress((prevProgress) => {\n//         // Increment progress by 1 until it reaches 100\n//         if (prevProgress >= 100) {\n//           clearInterval(interval); // Stop the interval when progress reaches 100\n//           return 100;\n//         }\n//         return prevProgress + 1;\n//       });\n//     }, 100); // Change the interval duration as needed\n\n//     // Simulate a delay before the progress starts\n//     setTimeout(() => {\n//       clearInterval(interval); // Stop the interval if it's still running\n//       setProgress(10); // Start progress from 10%\n//     }, 2000); // Change the delay duration as needed\n\n//     // Simulate a delay before the progress completes\n//     setTimeout(() => {\n//       setProgress(100); // Set progress to 100% when completed\n//     }, 5000); // Change the completion delay duration as needed\n//   };\n\n//   return (\n//     <div>\n\n//       <ProgressBar animated now={progress} variant=\"info\" />\n//     </div>\n//   );\n// }\n\n// export default CustomProgressBar;\n\nimport React, { useState } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomProgressBar() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const openPowerPointTabs = () => {\n    // Open PowerPoint files in new tabs\n    window.open('path_to_powerpoint_file_1', '_blank');\n    window.open('path_to_powerpoint_file_2', '_blank');\n\n    // Start tracking progress\n    startTrackingProgress();\n  };\n  const startTrackingProgress = () => {\n    let progressInterval;\n\n    // Start a timer to update the progress\n    progressInterval = setInterval(() => {\n      // Increase progress by a certain amount\n      setProgress(prevProgress => {\n        const newProgress = prevProgress + 1;\n        // If progress reaches 100%, clear the interval\n        if (newProgress >= 100) {\n          clearInterval(progressInterval);\n        }\n        return newProgress;\n      });\n    }, 1000); // Update progress every second (adjust as needed)\n\n    // Listen for tab close events to update progress\n    window.addEventListener('beforeunload', () => {\n      setProgress(prevProgress => {\n        // Increment progress when a tab is closed\n        const newProgress = prevProgress + (100 - prevProgress) / 2;\n        return newProgress;\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openPowerPointTabs,\n      children: \"Open PowerPoint Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: progress,\n      label: `${progress}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomProgressBar, \"MDavqfnVfXtrXQtLNoGNVIaRLCY=\");\n_c = CustomProgressBar;\nexport default CustomProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CustomProgressBar\");","map":{"version":3,"names":["React","useState","ProgressBar","jsxDEV","_jsxDEV","CustomProgressBar","_s","progress","setProgress","openPowerPointTabs","window","open","startTrackingProgress","progressInterval","setInterval","prevProgress","newProgress","clearInterval","addEventListener","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","now","label","_c","$RefreshReg$"],"sources":["C:/Users/2000081298/Amerihealth/acfc/src/pages/ProgressBar.js"],"sourcesContent":["// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n// function AnimatedExample() {\r\n\r\n//   return <ProgressBar animated now={50} variant=\"info\" />;\r\n// }\r\n\r\n// export default AnimatedExample;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\n// function CustomProgressBar() {\r\n//   const [progress, setProgress] = useState(0);\r\n\r\n//   const handleClick = () => {\r\n//     // Set progress to 0\r\n//     setProgress(0);\r\n\r\n//     // Simulate progress incrementing every 100 milliseconds\r\n//     const interval = setInterval(() => {\r\n//       setProgress((prevProgress) => {\r\n//         // Increment progress by 1 until it reaches 100\r\n//         if (prevProgress >= 100) {\r\n//           clearInterval(interval); // Stop the interval when progress reaches 100\r\n//           return 100;\r\n//         }\r\n//         return prevProgress + 1;\r\n//       });\r\n//     }, 100); // Change the interval duration as needed\r\n\r\n//     // Simulate a delay before the progress starts\r\n//     setTimeout(() => {\r\n//       clearInterval(interval); // Stop the interval if it's still running\r\n//       setProgress(10); // Start progress from 10%\r\n//     }, 2000); // Change the delay duration as needed\r\n\r\n//     // Simulate a delay before the progress completes\r\n//     setTimeout(() => {\r\n//       setProgress(100); // Set progress to 100% when completed\r\n//     }, 5000); // Change the completion delay duration as needed\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n      \r\n//       <ProgressBar animated now={progress} variant=\"info\" />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CustomProgressBar;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n\r\nfunction CustomProgressBar() {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const openPowerPointTabs = () => {\r\n    // Open PowerPoint files in new tabs\r\n    window.open('path_to_powerpoint_file_1', '_blank');\r\n    window.open('path_to_powerpoint_file_2', '_blank');\r\n\r\n    // Start tracking progress\r\n    startTrackingProgress();\r\n  };\r\n\r\n  const startTrackingProgress = () => {\r\n    let progressInterval;\r\n\r\n    // Start a timer to update the progress\r\n    progressInterval = setInterval(() => {\r\n      // Increase progress by a certain amount\r\n      setProgress((prevProgress) => {\r\n        const newProgress = prevProgress + 1;\r\n        // If progress reaches 100%, clear the interval\r\n        if (newProgress >= 100) {\r\n          clearInterval(progressInterval);\r\n        }\r\n        return newProgress;\r\n      });\r\n    }, 1000); // Update progress every second (adjust as needed)\r\n\r\n    // Listen for tab close events to update progress\r\n    window.addEventListener('beforeunload', () => {\r\n      setProgress((prevProgress) => {\r\n        // Increment progress when a tab is closed\r\n        const newProgress = prevProgress + (100 - prevProgress) / 2;\r\n        return newProgress;\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={openPowerPointTabs}>Open PowerPoint Files</button>\r\n      <ProgressBar now={progress} label={`${progress}%`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomProgressBar;\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACAC,MAAM,CAACC,IAAI,CAAC,2BAA2B,EAAE,QAAQ,CAAC;IAClDD,MAAM,CAACC,IAAI,CAAC,2BAA2B,EAAE,QAAQ,CAAC;;IAElD;IACAC,qBAAqB,CAAC,CAAC;EACzB,CAAC;EAED,MAAMA,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAIC,gBAAgB;;IAEpB;IACAA,gBAAgB,GAAGC,WAAW,CAAC,MAAM;MACnC;MACAN,WAAW,CAAEO,YAAY,IAAK;QAC5B,MAAMC,WAAW,GAAGD,YAAY,GAAG,CAAC;QACpC;QACA,IAAIC,WAAW,IAAI,GAAG,EAAE;UACtBC,aAAa,CAACJ,gBAAgB,CAAC;QACjC;QACA,OAAOG,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACAN,MAAM,CAACQ,gBAAgB,CAAC,cAAc,EAAE,MAAM;MAC5CV,WAAW,CAAEO,YAAY,IAAK;QAC5B;QACA,MAAMC,WAAW,GAAGD,YAAY,GAAG,CAAC,GAAG,GAAGA,YAAY,IAAI,CAAC;QAC3D,OAAOC,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,oBACEZ,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAQgB,OAAO,EAAEX,kBAAmB;MAAAU,QAAA,EAAC;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnEpB,OAAA,CAACF,WAAW;MAACuB,GAAG,EAAElB,QAAS;MAACmB,KAAK,EAAG,GAAEnB,QAAS;IAAG;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAAClB,EAAA,CA5CQD,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AA8C1B,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}