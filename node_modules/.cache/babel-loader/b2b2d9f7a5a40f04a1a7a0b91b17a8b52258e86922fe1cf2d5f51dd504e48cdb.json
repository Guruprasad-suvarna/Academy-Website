{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\n\n// Naive implementation - in reality would want to attach\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\n// if this is important to know on initial client render.\n// It would be safer to  return null for unmeasured states.\nexport const useDimensions = ref => {\n  _s();\n  const dimensions = useRef({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    dimensions.current.width = ref.current.offsetWidth;\n    dimensions.current.height = ref.current.offsetHeight;\n  }, []);\n  return dimensions.current;\n};\n_s(useDimensions, \"NpC5NsAphXwbxBdzDONhVAO+yb4=\");","map":{"version":3,"names":["useEffect","useRef","useDimensions","ref","_s","dimensions","width","height","current","offsetWidth","offsetHeight"],"sources":["C:/Users/2000081298/Amerihealth/acfc/src/pages/Deep Dive Session/use-dimensions.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n// Naive implementation - in reality would want to attach\r\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\r\n// if this is important to know on initial client render.\r\n// It would be safer to  return null for unmeasured states.\r\nexport const useDimensions = ref => {\r\n  const dimensions = useRef({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    dimensions.current.width = ref.current.offsetWidth;\r\n    dimensions.current.height = ref.current.offsetHeight;\r\n  }, []);\r\n\r\n  return dimensions.current;\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGC,GAAG,IAAI;EAAAC,EAAA;EAClC,MAAMC,UAAU,GAAGJ,MAAM,CAAC;IAAEK,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EAElDP,SAAS,CAAC,MAAM;IACdK,UAAU,CAACG,OAAO,CAACF,KAAK,GAAGH,GAAG,CAACK,OAAO,CAACC,WAAW;IAClDJ,UAAU,CAACG,OAAO,CAACD,MAAM,GAAGJ,GAAG,CAACK,OAAO,CAACE,YAAY;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOL,UAAU,CAACG,OAAO;AAC3B,CAAC;AAACJ,EAAA,CATWF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}